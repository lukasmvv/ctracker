{"version":3,"sources":["components/CompareChart/CompareChart.module.css","components/TextData/TextData.module.css","containers/Data/Data.module.css","App.module.css","components/WorldChart/WorldChart.module.css","components/LineChart/LineChart.module.css","components/CompareChart/CountryButton/CountryButton.module.css","components/LineChart/LineChart.js","components/WorldChart/WorldChart.js","components/CompareChart/CountryButton/CountryButton.js","components/CompareChart/CompareChart.js","components/TextData/TextData.js","containers/Data/Data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Chart","plugins","unregister","ChartDataLabels","LineChart","props","chartRef","React","createRef","state","type","data","options","nextProps","nextState","this","myChart","update","current","className","classes","ref","Component","WorldChart","countries","worldData","xLabels","lineData","labels","datasets","label","pointBackgroundColor","pointBorderColor","pointRadius","backgroundColor","borderColor","fill","datalabels","display","lineOptions","responsive","maintainAspectRatio","scales","xAxes","scaleLabel","labelString","fontSize","time","parser","unit","displayFormats","hour","day","month","ticks","autoSkip","maxTickLimit","gridLines","yAxes","position","beginAtZero","min","stepSize","legend","title","text","align","newLineData","newLineOptions","forEach","point","i","push","confirmed","deaths","recovered","countryButton","bg","allClasses","CountryButton","active","color","join","style","onClick","e","clicked","value","country","CompareChart","countryClicked","target","countryIndex","indexOf","newCountriesActive","countriesActive","countryActive","indices","d","includes","length","splice","map","allColors","hidden","anchor","offset","font","size","formatter","context","ret","dataIndex","newCases","newcases","setState","legendClick","toLowerCase","status","c","tooltips","enabled","colorsSet","confirmedClasses","LegendButton","LegendButtonActive","deathsClasses","recoveredClasses","newCasesClasses","LegendButtons","Buttons","key","isSet","parseInt","Math","random","TextData","num","str","substring","formatNumber","cData","confirmedPercentage","Button05","Button1","Button5","Button10","Button15","Button20","Button30","toFixed","deathsPercentage","recoveredPercentage","Data","fetch","then","res","json","Object","keys","sort","dataPoint","date","DataSource","href","world","newData","totalCases","totalDeaths","totalRecovered","ci","worldDateData","round","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.3725cf20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareChart\":\"CompareChart_CompareChart__1tq2Z\",\"Buttons\":\"CompareChart_Buttons__29JT-\",\"Chart\":\"CompareChart_Chart__24gdv\",\"LegendButtons\":\"CompareChart_LegendButtons__2zh9-\",\"LegendButton\":\"CompareChart_LegendButton__1iK6R\",\"LegendButtonActive\":\"CompareChart_LegendButtonActive__uLRGM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextData\":\"TextData_TextData__xFaa0\",\"Button\":\"TextData_Button__1uG1o\",\"Button05\":\"TextData_Button05__10o-g\",\"Button1\":\"TextData_Button1__2S3lG\",\"Button5\":\"TextData_Button5__96lIP\",\"Button10\":\"TextData_Button10__3IV42\",\"Button15\":\"TextData_Button15__13AGC\",\"Button20\":\"TextData_Button20__44wdt\",\"Button30\":\"TextData_Button30__1RM85\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Data\":\"Data_Data__18bED\",\"DataSource\":\"Data_DataSource__3RikH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Vb1h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorldChart\":\"WorldChart_WorldChart__VnCNQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LineChart\":\"LineChart_LineChart__qDqIh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryButton\":\"CountryButton_CountryButton__3AVAG\",\"CountryButtonActive\":\"CountryButton_CountryButtonActive__cHIx4\"};","import React, {Component} from 'react';\r\nimport Chart from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport classes from './LineChart.module.css';\r\n\r\nChart.plugins.unregister(ChartDataLabels);\r\n\r\nclass LineChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartRef = React.createRef();\r\n        this.state = {\r\n            type: 'line',\r\n            data: props.data,\r\n            options: props.options,\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n        return {\r\n            type: 'line',\r\n            data: nextProps.data,\r\n            options: nextProps.options,\r\n        } \r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        this.myChart.options = nextState.options;\r\n        this.myChart.data = nextState.data;\r\n        this.myChart.update();\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.myChart = new Chart(this.chartRef.current, {\r\n            plugins: [ChartDataLabels],\r\n            type: 'line',\r\n            data: this.state.data,\r\n            options: this.state.options\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.LineChart}>\r\n                <canvas ref={this.chartRef}/>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default LineChart;","import React, {Component} from 'react';\r\nimport classes from './WorldChart.module.css';\r\nimport LineChart from '../LineChart/LineChart';\r\n\r\nclass WorldChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: props.countries,\r\n            data: props.data,\r\n            worldData: props.worldData,\r\n            xLabels: props.xLabels,\r\n\r\n            lineData: {\r\n                labels: this.xLabels,\r\n                datasets: [{\r\n                    label: 'Confirmed Cases',\r\n                    data: [],\r\n                    pointBackgroundColor: '#42B3D5',\r\n                    pointBorderColor: '#42B3D5',\r\n                    pointRadius: 0,\r\n                    backgroundColor: '#42B3D5',\r\n                    borderColor: '#42B3D5',\r\n                    fill: false,\r\n                    datalabels: {\r\n                        display: false\r\n                    }\r\n                },{\r\n                    label: 'Deaths',\r\n                    data: [],\r\n                    pointBackgroundColor: '#E4521B',\r\n                    pointBorderColor: '#E4521B',\r\n                    pointRadius: 0,\r\n                    backgroundColor: '#E4521B',\r\n                    borderColor: '#E4521B',\r\n                    fill: false,\r\n                    datalabels: {\r\n                        display: false\r\n                    }\r\n                },{\r\n                    label: 'Recovered',\r\n                    data: [],\r\n                    pointBackgroundColor: '#E85285',\r\n                    pointBorderColor: '#E85285',\r\n                    pointRadius: 0,\r\n                    backgroundColor: '#E85285',\r\n                    borderColor: '#E85285',\r\n                    fill: false,\r\n                    datalabels: {\r\n                        display: false\r\n                    }\r\n                }]},\r\n\r\n            lineOptions: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Date',\r\n                            fontSize: 25\r\n                        },\r\n                        type: 'time',\r\n                        time: {\r\n                            parser: 'YYYY-MM-DD',\r\n                            unit: 'day',\r\n                            displayFormats: {\r\n                                hour: 'HH:mm',\r\n                                day: 'DD-MMM',\r\n                                month: 'MMM-YY'\r\n                             }\r\n                         },\r\n                        ticks: {\r\n                            // min: 0,\r\n                            // max: this.state.xLabels.length,\r\n                            fontSize: 15,\r\n                            autoSkip: true,\r\n                            maxTickLimit: 24                            \r\n                        },\r\n                        gridLines: {\r\n                            display: false\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        position: 'left',\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: '# People',\r\n                            fontSize: 25\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero:true,\r\n                            min: 0,\r\n                            stepSize: 50000\r\n                        },\r\n                        gridLines: {\r\n                            display: true\r\n                        }\r\n                    }]\r\n                },\r\n                legend: {\r\n                    display: true,\r\n                    labels: {\r\n                        fontSize: 18\r\n                    }\r\n                },\r\n                title: {\r\n                    text: 'World COVID-19 Cases',\r\n                    display: true,\r\n                    fontSize: 30,\r\n                    align: 'start'\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n    \r\n        let newLineData = state.lineData;\r\n        let newLineOptions = state.lineOptions;\r\n        \r\n        newLineData.labels = nextProps.xLabels;\r\n        newLineData.datasets[0].data = [];\r\n        newLineData.datasets[1].data = [];\r\n        newLineData.datasets[2].data = [];\r\n        state.worldData.forEach((point,i) => {\r\n            newLineData.datasets[0].data.push(point.confirmed);\r\n            newLineData.datasets[1].data.push(point.deaths);\r\n            newLineData.datasets[2].data.push(point.recovered);\r\n        });\r\n\r\n        return {\r\n            lineData: newLineData,\r\n            lineOptions: newLineOptions\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.WorldChart}>\r\n                <LineChart data={this.state.lineData} options={this.state.lineOptions}></LineChart>\r\n            </div>\r\n        );\r\n    }    \r\n};\r\n\r\nexport default WorldChart;","import React from 'react';\r\nimport classes from './CountryButton.module.css';\r\n\r\nconst countryButton = (props) => {\r\n    let bg = '#a5c9ec';\r\n    let allClasses = [classes.CountryButton];\r\n    if (props.active) {\r\n        bg = props.color;\r\n    }\r\n    return (\r\n        <button className={allClasses.join(' ')} style={{backgroundColor:bg}} onClick={(e) => props.clicked(e)} value={props.country}>{props.country}</button>\r\n    );\r\n}\r\n\r\nexport default countryButton;","import React, {Component} from 'react';\r\nimport classes from './CompareChart.module.css';\r\nimport LineChart from '../LineChart/LineChart';\r\nimport CountryButton from './CountryButton/CountryButton';\r\n\r\nclass CompareChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: props.countries,\r\n            countriesActive: props.countries.map(c => false),\r\n            data: props.data,\r\n            lineData: {\r\n                labels: props.xLabels, \r\n                datasets: []\r\n            },\r\n            lineOptions: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Date',\r\n                            fontSize: 25\r\n                        },\r\n                        type: 'time',\r\n                        time: {\r\n                            parser: 'YYYY-MM-DD',\r\n                            unit: 'day',\r\n                            displayFormats: {\r\n                                hour: 'HH:mm',\r\n                                day: 'DD-MMM',\r\n                                month: 'MMM-YY'\r\n                             }\r\n                         },\r\n                        ticks: {\r\n                            // min: 0,\r\n                            // max: this.state.xLabels.length,\r\n                            fontSize: 15,\r\n                            autoSkip: true,\r\n                            maxTickLimit: 24                            \r\n                        },\r\n                        gridLines: {\r\n                            display: false\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        position: 'left',\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: '# People',\r\n                            fontSize: 25\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero:true,\r\n                            min: 0\r\n                        },\r\n                        gridLines: {\r\n                            display: true\r\n                        }\r\n                    }]\r\n                },\r\n                legend: {\r\n                    display: false,\r\n                    labels: {\r\n                        fontSize: 18\r\n                    }\r\n                },\r\n                tooltips: {\r\n                    enabled: true\r\n                },\r\n                title: {\r\n                    text: 'Compare Cases',\r\n                    display: true,\r\n                    fontSize: 30,\r\n                    align: 'start'\r\n                }\r\n            },\r\n            confirmed: true,\r\n            deaths: false,\r\n            recovered: false,\r\n            newcases: false,\r\n            allColors: props.countries.map(c => false),\r\n            colorsSet: false\r\n        }\r\n        \r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n        const options = state.lineOptions;\r\n        let allColors = state.allColors; \r\n        let isSet = state.colorsSet;\r\n        \r\n        // console.log(nextProps.countries.length>0 && isSet===false);\r\n        if (nextProps.countries.length>0 && isSet===false) {\r\n            allColors = [];      \r\n            for (var i=0;i<nextProps.countries.length;i++) {\r\n                allColors.push(`rgba(${parseInt(255*Math.random())}, ${parseInt(255*Math.random())}, ${parseInt(255*Math.random())}, 1)`);               \r\n            }\r\n            isSet = true;\r\n        }     \r\n\r\n        return {\r\n            data: nextProps.data, \r\n            countries: nextProps.countries,\r\n            lineOptions: options,\r\n            allColors: allColors,\r\n            colorsSet: isSet\r\n        }\r\n    }\r\n\r\n    // generateColors(numCol) {\r\n    //     let allColors = [];\r\n    //     for (var i=0;i<numCol;i++) {\r\n    //         allColors.push(`rgba(${parseInt(255*Math.random())}, ${parseInt(255*Math.random())}, ${parseInt(255*Math.random())}, 1)`);\r\n    //     }\r\n    //     return allColors;\r\n    // }\r\n\r\n    countryClicked = (e) => {\r\n        const country = e.target.value;\r\n        const data = this.state.data[country];\r\n        const countryIndex = this.state.countries.indexOf(country);\r\n        \r\n        const newCountriesActive = this.state.countriesActive;\r\n        const countryActive = newCountriesActive[countryIndex];\r\n\r\n        let datasets = this.state.lineData.datasets;\r\n\r\n        if (countryActive) {\r\n            newCountriesActive[countryIndex] = !countryActive;\r\n\r\n            let indices = [];\r\n            \r\n            datasets.forEach((d,i) => {\r\n                if (d.label.includes(country)) {\r\n                    indices.push(i);\r\n                }                \r\n            }); \r\n            for (var i=indices.length-1;i>-1;i--) {\r\n                datasets.splice(indices[i],1);\r\n            }\r\n        } else {\r\n            newCountriesActive[countryIndex] = !countryActive;//\r\n            datasets.push({\r\n                label: `${country} Confirmed Cases`,\r\n                data: data.map(point => point.confirmed),\r\n                pointBackgroundColor: this.state.allColors[countryIndex],\r\n                pointBorderColor: this.state.allColors[countryIndex],\r\n                pointRadius: 0,\r\n                // borderWidth: 7,\r\n                backgroundColor: this.state.allColors[countryIndex],\r\n                borderColor: this.state.allColors[countryIndex],\r\n                fill: false,\r\n                hidden: this.state.confirmed===true ? false : true,\r\n                datalabels: {\r\n                    anchor: 'start',\r\n                    align: 'left',\r\n                    offset: 10,\r\n                    font: {\r\n                        size: 20\r\n                    },\r\n                    formatter: function(value, context) {\r\n                        let ret = '';\r\n                        if (context.dataIndex===data.length-1) {\r\n                            ret = `${country}: ${value} C`;\r\n                        }\r\n                        return ret;\r\n                    }\r\n                }\r\n            });\r\n            datasets.push({\r\n                label: `${country} Deaths`,\r\n                data: data.map(point => point.deaths),\r\n                pointBackgroundColor: this.state.allColors[countryIndex],\r\n                pointBorderColor: this.state.allColors[countryIndex],\r\n                pointRadius: 0,\r\n                backgroundColor: this.state.allColors[countryIndex],\r\n                borderColor: this.state.allColors[countryIndex],\r\n                // pointStyle: 'star',\r\n                fill: false,\r\n                hidden: this.state.deaths===true ? false : true,\r\n                datalabels: {\r\n                    anchor: 'start',\r\n                    align: 'left',\r\n                    offset: 10,\r\n                    font: {\r\n                        size: 20\r\n                    },\r\n                    formatter: function(value, context) {\r\n                        let ret = '';\r\n                        if (context.dataIndex===data.length-1) {\r\n                            ret = `${country}: ${value} D`;\r\n                        }\r\n                        return ret;\r\n                    }\r\n                }\r\n            });\r\n            datasets.push({\r\n                label: `${country} Recovered`,\r\n                data: data.map(point => point.recovered),\r\n                pointBackgroundColor: this.state.allColors[countryIndex],\r\n                pointBorderColor: this.state.allColors[countryIndex],\r\n                pointRadius: 0,\r\n                backgroundColor: this.state.allColors[countryIndex],\r\n                borderColor: this.state.allColors[countryIndex],\r\n                // pointStyle: 'triangle',\r\n                fill: false,\r\n                hidden: this.state.recovered===true ? false : true,\r\n                datalabels: {\r\n                    anchor: 'start',\r\n                    align: 'left',\r\n                    offset: 10,\r\n                    font: {\r\n                        size: 20\r\n                    },\r\n                    formatter: function(value, context) {\r\n                        let ret = '';\r\n                        if (context.dataIndex===data.length-1) {\r\n                            ret = `${country}: ${value} R`;\r\n                        }\r\n                        return ret;\r\n                    }\r\n                }\r\n            });\r\n            datasets.push({\r\n                label: `${country} NewCases`,\r\n                data: data.map(point => point.newCases),\r\n                pointBackgroundColor: this.state.allColors[countryIndex],\r\n                pointBorderColor: this.state.allColors[countryIndex],\r\n                pointRadius: 0,\r\n                backgroundColor: this.state.allColors[countryIndex],\r\n                borderColor: this.state.allColors[countryIndex],\r\n                // pointStyle: 'triangle',\r\n                fill: false,\r\n                hidden: this.state.newcases===true ? false : true,\r\n                datalabels: {\r\n                    anchor: 'start',\r\n                    align: 'left',\r\n                    offset: 10,\r\n                    font: {\r\n                        size: 20\r\n                    },\r\n                    formatter: function(value, context) {\r\n                        let ret = '';\r\n                        if (context.dataIndex===data.length-1) {\r\n                            ret = `${country}: ${value} NC`;\r\n                        }\r\n                        return ret;\r\n                    }\r\n                }\r\n            });\r\n        }        \r\n\r\n        const lineData = {\r\n            labels: this.props.xLabels,\r\n            datasets: datasets\r\n        }\r\n        \r\n        this.setState({\r\n            lineData: lineData\r\n        });\r\n    }\r\n\r\n    legendClick = (e) => {\r\n        const clicked = e.target.value.toLowerCase();\r\n        \r\n        let datasets = this.state.lineData.datasets;\r\n        // let newDatasets = datasets.slice();\r\n        // let indices = [];\r\n        let status = this.state[clicked];\r\n\r\n        datasets.forEach((d,i) => {\r\n            if (this.state[clicked]) {\r\n                if((d.label.toLowerCase()).includes(clicked)) {\r\n                    d.hidden = true; \r\n                }\r\n            } else {\r\n                if((d.label.toLowerCase()).includes(clicked)) {\r\n                    d.hidden = false;  \r\n                } \r\n            }                                      \r\n        });   \r\n        status = !status;\r\n        \r\n        this.setState({\r\n            [clicked]: status,\r\n            datasets: datasets\r\n        });\r\n    }\r\n\r\n    render() {  \r\n        // this.colors = this.generateColors(this.props.countries.length);\r\n        let confirmedClasses = [classes.LegendButton];\r\n        if (!this.state.confirmed) {\r\n            confirmedClasses.push(classes.LegendButtonActive);\r\n        }\r\n        let deathsClasses = [classes.LegendButton];\r\n        if (!this.state.deaths) {\r\n            deathsClasses.push(classes.LegendButtonActive);\r\n        }\r\n        let recoveredClasses = [classes.LegendButton];\r\n        if (!this.state.recovered) {\r\n            recoveredClasses.push(classes.LegendButtonActive);\r\n        }\r\n        let newCasesClasses = [classes.LegendButton];\r\n        if (!this.state.newcases) {\r\n            newCasesClasses.push(classes.LegendButtonActive);\r\n        }\r\n\r\n        return (\r\n            <div className={classes.CompareChart}>\r\n                <div className={classes.LegendButtons}>\r\n                    <button className={confirmedClasses.join(' ')} value={'confirmed'} onClick={(e) => this.legendClick(e)}>Cases</button>\r\n                    <button className={deathsClasses.join(' ')} value={'deaths'} onClick={(e) => this.legendClick(e)}>Deaths</button>\r\n                    <button className={recoveredClasses.join(' ')}  value={'recovered'} onClick={(e) => this.legendClick(e)}>Recovered</button>\r\n                    <button className={newCasesClasses.join(' ')}  value={'newCases'} onClick={(e) => this.legendClick(e)}>Daily New Cases</button>\r\n                </div>\r\n                <div className={classes.Chart}>\r\n                    <LineChart data={this.state.lineData} options={this.state.lineOptions}></LineChart>\r\n                </div>\r\n                <div className={classes.Buttons}>\r\n                    {this.state.countries.map((country,i) => {\r\n                        return <CountryButton key={i} color={this.state.allColors[i]} active={this.state.countriesActive[i]} country={country} clicked={this.countryClicked}></CountryButton>\r\n                    })}\r\n                </div>                \r\n            </div>\r\n        );\r\n    }\r\n    \r\n};\r\n\r\nexport default CompareChart;","import React, {Component} from 'react';\r\nimport classes from './TextData.module.css';\r\n\r\nclass TextData extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countries: props.countries,\r\n            data: props.data,\r\n            worldData: props.worldData\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n        return {\r\n            countries: nextProps.countries,\r\n            data: nextProps.data,\r\n            worldData: nextProps.worldData\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.data===[] || this.state.countries===[] || this.state.worldData===[]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    formatNumber(num) {\r\n        let str = ''+num;\r\n        if (num > 1000000) {\r\n            return `${str.substring(0,1)},${str.substring(1,4)},${str.substring(4,str.length)}`;\r\n        } else if (num > 100000) {\r\n            return `${str.substring(0,3)},${str.substring(3,str.length)}`;\r\n        } else if (num > 10000) {\r\n            return `${str.substring(0,2)},${str.substring(2,str.length)}`;\r\n        } else if (num >1000) {\r\n            return `${str.substring(0,1)},${str.substring(1,str.length)}`;\r\n        } else {\r\n            return `${num}`\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <div>\r\n                <h1>World | {this.formatNumber(this.state.worldData[this.state.worldData.length-1].confirmed)} | {this.formatNumber(this.state.worldData[this.state.worldData.length-1].deaths)} | {this.formatNumber(this.state.worldData[this.state.worldData.length-1].recovered)}</h1>\r\n                {this.state.countries.map((country,i) => {\r\n                    const cData = this.state.data[country];\r\n                    let allClasses = [];\r\n\r\n                    if (cData[cData.length-1].confirmedPercentage < 1) {\r\n                        allClasses.push(classes.Button05);\r\n                    } else if (cData[cData.length-1].confirmedPercentage < 1) {\r\n                        allClasses.push(classes.Button1);\r\n                    } else if (cData[cData.length-1].confirmedPercentage < 5) {\r\n                        allClasses.push(classes.Button5);\r\n                    } else if (cData[cData.length-1].confirmedPercentage < 10) {\r\n                        allClasses.push(classes.Button10);\r\n                    } else if (cData[cData.length-1].confirmedPercentage < 15) {\r\n                        allClasses.push(classes.Button15);\r\n                    } else if (cData[cData.length-1].confirmedPercentage < 20) {\r\n                        allClasses.push(classes.Button20);\r\n                    } else if (cData[cData.length-1].confirmedPercentage < 30) {\r\n                        allClasses.push(classes.Button30);\r\n                    } \r\n\r\n                    return <button key={i} className={allClasses.join(' ')} >\r\n                            {country} | {this.formatNumber(cData[cData.length-1].confirmed)} ({(cData[cData.length-1].confirmedPercentage).toFixed(2)}%) | {this.formatNumber(cData[cData.length-1].deaths)} ({(cData[cData.length-1].deathsPercentage).toFixed(2)}%) | {this.formatNumber(cData[cData.length-1].recovered)} ({(cData[cData.length-1].recoveredPercentage).toFixed(2)}%)</button>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextData;\r\n\r\n// style={\r\n//     {\r\n//         height: country==='South Africa'||country==='Ireland' ? '20%' : `${cData[cData.length-1].confirmedPercentage.toFixed(2)/10}em`,\r\n//         color: country==='South Africa'||country==='Ireland' ? 'green' : 'black'\r\n//     }} ","import React, { Component } from 'react';\r\nimport classes from './Data.module.css';\r\n// import LineChart from '../../components/LineChart/LineChart';\r\nimport WorldChart from '../../components/WorldChart/WorldChart';\r\nimport CompareChart from '../../components/CompareChart/CompareChart';\r\nimport TextData from '../../components/TextData/TextData';\r\n\r\n// https://github.com/pomber/covid19\r\n\r\nclass Data extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            data: [],\r\n            countries: [],\r\n            xLabels: [],  \r\n            worldData: [{\r\n                confirmed: 0,\r\n                deaths: 0,\r\n                recovered: 0\r\n            }]          \r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n\r\n        let world = state.worldData;\r\n        let newData = state.data;\r\n        const precision = 10000;\r\n\r\n        // calculating world stats\r\n        state.xLabels.forEach((date,i) => {\r\n\r\n            let totalCases = 0;\r\n            let totalDeaths = 0;\r\n            let totalRecovered = 0;\r\n\r\n            state.countries.forEach((country,ci) => {\r\n                const cData = state.data[country];\r\n    \r\n                totalCases = totalCases + cData[i].confirmed;\r\n                totalDeaths = totalDeaths + cData[i].deaths;\r\n                totalRecovered = totalRecovered + cData[i].recovered;\r\n            });\r\n\r\n            world[i] = {\r\n                date: date,\r\n                confirmed: totalCases,\r\n                deaths: totalDeaths,\r\n                recovered: totalRecovered\r\n            }\r\n        });\r\n\r\n        // adding percentages\r\n        state.xLabels.forEach((date,i) => {\r\n            const worldDateData = world[i];\r\n            state.countries.forEach((country,ci) => {\r\n                const cData = state.data[country];\r\n\r\n                // console.log(`${country} ${(cData[i].confirmed/worldDateData.confirmed)*100}`);\r\n                newData[country][i].confirmedPercentage = 100*(Math.round(precision*cData[i].confirmed/worldDateData.confirmed)/precision);\r\n                newData[country][i].deathsPercentage = 100*(Math.round(precision*cData[i].deaths/worldDateData.deaths)/precision);\r\n                newData[country][i].recoveredPercentage = 100*(Math.round(precision*cData[i].recovered/worldDateData.recovered)/precision);\r\n                i!==0 ? newData[country][i].newCases = newData[country][i].confirmed - newData[country][i-1].confirmed: newData[country][i].newCases = 0\r\n            });\r\n        });\r\n\r\n        return {\r\n            worldData: world,\r\n            data: newData\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://pomber.github.io/covid19/timeseries.json`)\r\n        .then(res => res.json())\r\n        .then(json => this.setState({ \r\n            data: json,\r\n            countries: Object.keys(json).sort(),\r\n            xLabels: json['Afghanistan'].map((dataPoint) => dataPoint.date)\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Data}>\r\n                <h1>Country | Cases | Deaths | Recovered</h1>\r\n                \r\n                <TextData worldData={this.state.worldData} countries={this.state.countries} data={this.state.data}></TextData>\r\n                <WorldChart xLabels={this.state.xLabels} worldData={this.state.worldData} countries={this.state.countries} data={this.state.data}></WorldChart>\r\n                <CompareChart xLabels={this.state.xLabels} countries={this.state.countries} data={this.state.data}></CompareChart>\r\n                {/* <p className={classes.DataSource}>Data Source: https://github.com/pomber/covid19</p> */}\r\n                <p><a className={classes.DataSource} href=\"https://github.com/pomber/covid19\">Data Source: https://github.com/pomber/covid19</a></p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Data;","import React from 'react';\nimport classes from './App.module.css';\nimport Data from '../src/containers/Data/Data';\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <Data></Data>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}